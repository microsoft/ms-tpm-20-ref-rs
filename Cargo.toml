[package]
name = "ms-tpm-20-ref"
version = "0.1.0"
authors = ["Daniel Prilik <daprilik@microsoft.com>"]
edition = "2018"
license = "MIT"
description = "Rust wrapper around ms-tpm-20-ref"
repository = "https://github.com/daprilik/ms-tpm-20-ref-rs"
readme = "README.md"
categories = ["cryptography", "external-ffi-bindings"]

[features]
default = []

vendored = ["openssl-sys/vendored"]

[dependencies]
once_cell = "1.7.2"
openssl-sys = "0.9.71"
tracing = "0.1"

# state de/serialization
postcard = { version = "1.0.2", default-features = false, features = ["use-std"] }
serde = { version = "1.0", features = ["derive"] }

[build-dependencies]
cc = { version = "1.0", features = [ "parallel" ] }
walkdir = "2.3.2"

[dev-dependencies]
pretty_env_logger = "0.4.0"

[lints]
workspace = true

[workspace]
members = ["test-harness"]

[workspace.lints.clippy]
await_holding_lock = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
filter_map_next = "warn"
fn_params_excessive_bools = "warn"
imprecise_flops = "warn"
inefficient_to_string = "warn"
linkedlist = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
match_on_vec_items = "warn"
needless_continue = "warn"
option_option = "warn"
ref_option_ref = "warn"
rest_pat_in_fully_bound_structs = "warn"
string_to_string = "warn"
suboptimal_flops = "warn"
undocumented_unsafe_blocks = "warn"
unnecessary_box_returns = "warn"

# Nested if / else if statements can be easier to read than an equivalent
# flattened statements.
collapsible_else_if = "allow"
collapsible_if = "allow"
# There are types where it makes sense to define the length, but it can never
# be empty. This lint is reasonable for container-like data-structures, but
# makes less sense for hardware-backed data structures.
len_without_is_empty = "allow"
# This is the #1 most commonly ignored lint for a reason (at least according
# to [this famous issue](https://github.com/rust-lang/rust-clippy/issues/5418)
# on the clippy GitHub repo)! There are plenty of perfectly reasonable
# functions that require a large number of non-optional arguments,
# particularly when working with low-level hardware APIs.
too_many_arguments = "allow"
# This is a heuristic based lint that isn't always appropriate. While it's
# often a good to decompose complex types into more digestible chunks, there
# are many cases where a one-off complex type is required, and suppressing
# this lint will simply add line-noise.
type_complexity = "allow"
# This lint attempts to simplify usages of if let usage in a loop where only
# one variant type is used. While somewhat useful, its suggestions can lead to
# throwing away potentially useful error information in non-obvious ways.
manual_flatten = "allow"
# This lint warns about comparing boolean values in an `assert_eq!` statement
# when `assert!` could be used instead. While shorter, the explicit comparison
# can be more obvious to read in certain cases than unary operators with
# `assert!`.
bool_assert_comparison = "allow"
# This lint suggests collapsing Box::new(Foo::default()) into Box::default(). We
# often prefer to specify types completely for local code clarity's sake.
box_default = "allow"
# This lint is purely style, and we are ok with inlined and uninlined format args.
uninlined_format_args = "allow"
# Besides the misleading name (this lint also triggers on arrays), we believe
# that it doesn't provide value. If a developer gets their type wrong they'll
# notice and fix it. Sometimes you do want a list of a single range.
single_range_in_vec_init = "allow"
